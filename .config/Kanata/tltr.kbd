(defcfg
  danger-enable-cmd yes
  delegate-to-first-layer yes  ;; transparent keys(_) delegate to first-layer only if layer-switch is used to activate the layer
  process-unmapped-keys no
  block-unmapped-keys no
  rapid-event-delay 2         ;; adds a certain delay(ms) to have kanata processor output keys in correct order
  concurrent-tap-hold yes
  log-layer-changes no
)

;; the reduced ANSI QWERTY 60% layout (39-key layout)
(defsrc
  ‚Üπ   q    w    e    r    t         u    i    o    p   [     ]  ;; 12 keys
  ‚á™   a    s    d    f    g         j    k    l    ;    '    ‚èé  ;; 12 keys
  ‚Äπ‚áß  z    x    c    v    b         n    m    ,    .    /    ‚áß‚Ä∫ ;; 12 keys
                ‚Äπ‚å• ‚Äπ‚óÜ          ‚ê£          ‚óÜ‚Ä∫ ‚å•‚Ä∫                 ;; 3 keys (2 redundant keys for interoperability b/w diff. keyboards & OS)
)

;; TLTR Activation
;; implementation 1
#|
(defchords tl_tr 500
  (tl  ) (layer-while-held TL)
  (  tr) (layer-while-held TR)
  (tl tr) (layer-while-held TLTR)
)
(defalias
  tl (chord tl_tr tl)
  tr (chord tl_tr tr)
)
|#
;;implementation 2
#|
(defalias
  tl (multi nop3 (switch
    (nop4) (layer-while-held TLTR) break
    () (multi (release-layer TLTR) (layer-while-held TL)) break
  ))
  tr (multi nop4 (switch
    (nop3) (layer-while-held TLTR) break
    () (multi (release-layer TLTR) (layer-while-held TR)) break
  ))
)
|#
;; implementation 3
(defvirtualkeys
  release_layer_TLTR (release-layer TLTR)
)

(defalias
  tl     (multi (layer-while-held TL)                         (on-release press-vkey release_layer_TLTR))
  tltltr (multi (layer-while-held TL) (layer-while-held TLTR) (on-release press-vkey release_layer_TLTR))
  tr     (multi (layer-while-held TR)                         (on-release press-vkey release_layer_TLTR))
  trtltr (multi (layer-while-held TR) (layer-while-held TLTR) (on-release press-vkey release_layer_TLTR))
)

(defalias
  ;; chords
  und S-‚Äê que S-/
  ;; forks
  delf (fork ‚å´ (unshift ‚å¶) (‚Äπ‚áß ‚áß‚Ä∫))
  slaf (fork / (unshift \) (‚Äπ‚áß ‚áß‚Ä∫))
  comf (fork , @und (‚Äπ‚áß ‚áß‚Ä∫))
  dotf (fork . @que (‚Äπ‚áß ‚áß‚Ä∫))
)

#|
 Custom Colemak with,
 1. curl mod (mod dh)
 2. wide mod (shifting right hand keys to the right by one key)
 3. angle mod (placement of z in the middle)
|#
(deflayer CUSTOM_COLEMAK
  _     q  w  f  p  b          j    l  u    y      '    ;
  @delf a  r  s  t  g          m    n  e    i      o    _
  _     x  c  d  v  z        @slaf  k  h  @comf  @dotf  _
          @tl @tl       _       @tr @tr
)

(defvar
  os_timeout 300
  cw_timeout 5000
)

(defalias
  ;; chords
  btb S-‚Üπ
  ;; sticky/one-shot modifiers
  sMet (one-shot-release $os_timeout ‚Äπ‚óÜ)
  sSft (one-shot-release $os_timeout ‚Äπ‚áß)
  sCtl (one-shot-release $os_timeout ‚Äπ‚åÉ)
  sAlt (one-shot-release $os_timeout ‚Äπ‚å•)
  sFn (one-shot-release $os_timeout nop0)
  sWin (multi @sAlt @sCtl @sMet)         ;; window-manager key (meant for window manipulation)
  sHyp (multi @sAlt @sCtl @sSft @sMet)   ;; hyper key (meant for application shortcuts)
  ;; forks
  pguf (fork ‚áû (unshift ‚§í) (‚Äπ‚áß ‚áß‚Ä∫))
  pgdf (fork ‚áü (unshift ‚§ì) (‚Äπ‚áß ‚áß‚Ä∫))
  ;; caps-word
  cw (caps-word-custom $cw_timeout
    (a b c d e f g h i j k l m n o p q r s t u v w x y z) ;; to be shifted
    (1 2 3 4 5 6 7 8 9 0 ‚ñ≤ ‚ñº ‚óÄ ‚ñ∂ ‚å´ ‚å¶ ‚Äê ‚Äπ‚áß ‚áß‚Ä∫)  ;; ignore
  )
)

;; TL (Thumb Left) layer
;; for modifiers & navigation
(deflayer TL
  _ ‚éã     @sWin @sFn  XX    XX      @pguf  @btb ‚ñ≤   ‚Üπ  XX  XX
  _ @sAlt @sCtl @sSft @sMet XX      @pgdf  ‚óÄ    ‚ñº   ‚ñ∂  @cw _
  _ XX    XX    @sHyp XX    XX      XX     XX   ‚å´   ‚å¶  XX  _
             XX  XX             _          @trtltr @trtltr
)

(defalias
  hpn (unshift ‚Äê) equ (unshift ‚Çå)
  ;; chords
  til S-Àã exc S-1 ats S-2 oct S-3 dol S-4 per S-5 car S-6 amp S-7 ast S-8 pao S-9 pac S-0 plu S-‚Çå
  cuo S-[ cuc S-] pip S-\ ano S-, anc S-.
  ;; symbols' forks
  excf (fork @exc (unshift Àã) (‚Äπ‚áß ‚áß‚Ä∫))
  atsf (fork @ats @til (‚Äπ‚áß ‚áß‚Ä∫))
  octf (fork @oct @car (‚Äπ‚áß ‚áß‚Ä∫))
  dolf (fork @dol (unicode ‚Çπ) (‚Äπ‚áß ‚áß‚Ä∫))
  ampf (fork @amp @pip (‚Äπ‚áß ‚áß‚Ä∫))

  ;; brackets' forks
  curf (fork @cuo @cuc (‚Äπ‚áß ‚áß‚Ä∫))
  parf (fork @pao @pac (‚Äπ‚áß ‚áß‚Ä∫))
  sqrf (fork [ (unshift ]) (‚Äπ‚áß ‚áß‚Ä∫))

  ;; funciton keys' fn-forks
  1f   (fork 1 f1  (nop0))
  2f   (fork 2 f2  (nop0))
  3f   (fork 3 f3  (nop0))
  4f   (fork 4 f4  (nop0))
  5f   (fork 5 f5  (nop0))
  6f   (fork 6 f6  (nop0))
  7f   (fork 7 f7  (nop0))
  8f   (fork 8 f8  (nop0))
  9f   (fork 9 f9  (nop0))
  0f   (fork 0 f10 (nop0))
  astf (fork @ast f11 (nop0))
  perf (fork @per f12 (nop0))
)

;; TR (Thumb Right) layer
;; for symbols & numbers
(deflayer TR
  _  @excf @atsf @octf @dolf XX      @perf  @7f  @8f  @9f  @plu  @equ
  _  @ampf @sqrf @curf @parf XX      @astf  @4f  @5f  @6f  @hpn  _
  _  XX    @ano  @anc  XX    XX      @slaf  @0f  @1f  @2f  @3f   _
       @tltltr @tltltr            _             XX XX
)

(defvirtualkeys
  brightness_up_key (unshift üîÜ)
  brightness_down_key (unshift üîÖ)
)
;; media & screen control
(platform (macos)
  (defalias
    ss (cmd /usr/bin/open -a ScreenSaverEngine)
    zz (cmd /usr/bin/pmset sleepnow)
    voli (fork üîä (macro (cmd /usr/bin/osascript -e "set volume output volume 100") 275 (unshift üîä)) (‚Äπ‚áß ‚áß‚Ä∫))
    voll (fork üîâ (macro (cmd /usr/bin/osascript -e "set volume output volume 0") 275 (unshift üîâ)) (‚Äπ‚áß ‚áß‚Ä∫))
    bri (fork üîÜ (macro (on-press press-vkey brightness_up_key) 750 (on-press release-vkey brightness_up_key)) (‚Äπ‚áß ‚áß‚Ä∫))
    brl (fork üîÖ (macro (on-press press-vkey brightness_down_key) 750 (on-press release-vkey brightness_down_key)) (‚Äπ‚áß ‚áß‚Ä∫))
  )
)
(platform (linux)
  (defalias
    ss (cmd /usr/bin/xscreensaver-command -activate)
    zz (cmd /usr/bin/xset dpms force off)
    voli (fork üîä (cmd /usr/bin/amixer -D pulse sset Master 100%) (‚Äπ‚áß ‚áß‚Ä∫))
    voll (fork üîâ (cmd /usr/bin/amixer -D pulse sset Master 0%) (‚Äπ‚áß ‚áß‚Ä∫))
    bri (fork üîÜ (cmd /usr/bin/xbacklight -set 100) (‚Äπ‚áß ‚áß‚Ä∫))
    brl (fork üîÖ (cmd /usr/bin/xbacklight -set 0) (‚Äπ‚áß ‚áß‚Ä∫))
  )
)
(platform (win winiov2 wintercept)
  (defalias
    ss (cmd nircmd screensaver)
    zz (cmd nircmd standby)
    voli (fork üîä (cmd nircmd setsysvolume 65535) (‚Äπ‚áß ‚áß‚Ä∫))
    voll (fork üîâ (cmd nircmd setsysvolume 0) (‚Äπ‚áß ‚áß‚Ä∫))
    bri (fork (cmd nircmd changebrightness +10) (cmd nircmd changebrightness +100) (‚Äπ‚áß ‚áß‚Ä∫))
    brl (fork (cmd nircmd changebrightness -10) (cmd nircmd changebrightness -100) (‚Äπ‚áß ‚áß‚Ä∫))
  )
)

(defalias
  scre (tap-hold 200 500 @ss @zz)
  med (switch
    (‚áß‚Ä∫) (unshift ‚ñ∂‚ñ∂) break
    (‚Äπ‚áß) (unshift ‚óÄ‚óÄ) break
    () ‚ñ∂‚è∏ break
  )
)

;; mouse
(platform (macos)
  (defvar
    ;; in pixels
    mouse_move 40
    slow_mouse_move 10
    scroll_move 02
    slow_scroll_move 01
    ;; in milliseconds
    repeat_delay 25
  )
)
(platform (macos)
  ;; if natural scrolling is enabled
  (defalias
    mu (switch
      ((and nop2 nop1)) (mwheel-down $repeat_delay $slow_scroll_move) break
      (nop1) (mwheel-down $repeat_delay $scroll_move) break
      (nop2) (movemouse-up $repeat_delay $slow_mouse_move) break
      () (movemouse-up $repeat_delay $mouse_move) break
    )
    md (switch
      ((and nop2 nop1)) (mwheel-up $repeat_delay $slow_scroll_move) break
      (nop1) (mwheel-up $repeat_delay $scroll_move) break
      (nop2) (movemouse-down $repeat_delay $slow_mouse_move) break
      () (movemouse-down $repeat_delay $mouse_move) break
    )
    mr (switch
      ((and nop2 nop1)) (mwheel-left $repeat_delay $slow_scroll_move) break
      (nop1) (mwheel-left $repeat_delay $scroll_move) break
      (nop2) (movemouse-right $repeat_delay $slow_mouse_move) break
      () (movemouse-right $repeat_delay $mouse_move) break
    )
    ml (switch
      ((and nop2 nop1)) (mwheel-right $repeat_delay $slow_scroll_move) break
      (nop1) (mwheel-right $repeat_delay $scroll_move) break
      (nop2) (movemouse-left $repeat_delay $slow_mouse_move) break
      () (movemouse-left $repeat_delay $mouse_move) break
    )
  )
)
(platform (linux win winiov2 wintercept)
  (defvar
    ;; in pixels
    mouse_move 35
    slow_mouse_move 10
    scroll_move 50
    slow_scroll_move 20
    ;; in milliseconds
    repeat_delay 25
  )
)
(platform (linux win winiov2 wintercept)
  (defalias
    mu (switch
      ((and nop2 nop1)) (mwheel-up $repeat_delay $slow_scroll_move) break
      (nop1) (mwheel-up $repeat_delay $scroll_move) break
      (nop2) (movemouse-up $repeat_delay $slow_mouse_move) break
      () (movemouse-up $repeat_delay $mouse_move) break
    )
    md (switch
      ((and nop2 nop1)) (mwheel-down $repeat_delay $slow_scroll_move) break
      (nop1) (mwheel-down $repeat_delay $scroll_move) break
      (nop2) (movemouse-down $repeat_delay $slow_mouse_move) break
      () (movemouse-down $repeat_delay $mouse_move) break
    )
    mr (switch
      ((and nop2 nop1)) (mwheel-right $repeat_delay $slow_scroll_move) break
      (nop1) (mwheel-right $repeat_delay $scroll_move) break
      (nop2) (movemouse-right $repeat_delay $slow_mouse_move) break
      () (movemouse-right $repeat_delay $mouse_move) break
    )
    ml (switch
      ((and nop2 nop1)) (mwheel-left $repeat_delay $slow_scroll_move) break
      (nop1) (mwheel-left $repeat_delay $scroll_move) break
      (nop2) (movemouse-left $repeat_delay $slow_mouse_move) break
      () (movemouse-left $repeat_delay $mouse_move) break
    )
  )
)

;; default switching
(defvirtualkeys
  on_qwerty_layer (layer-while-held QWERTY)
)
(defalias
  slw nop2
  scr nop1
  def (on-press press-vkey on_qwerty_layer)
)

;; TLTR (Thumb Left & Thumb Right) layer
;; for non-keyboard functions like mouse, media, etc.
(deflayer TLTR
  XX @scre @bri @med  @voli XX          XX XX  @mu XX  XX lrld
  XX @slw  @scr mrgt  mlft  XX          XX @ml @md @mr XX XX
  _  @brl  XX   @voll XX    XX          XX XX  XX  XX  XX _
                XX XX            @def          XX XX
)

(defalias ndef
  (switch
    ((and ‚Äπ‚óÜ ‚óÜ‚Ä∫)) (on-press release-vkey on_qwerty_layer) break
    ((and ‚Äπ‚å• ‚å•‚Ä∫)) (on-press release-vkey on_qwerty_layer) break
    () ‚ê£ break
  )
)

;;ANSI QWERTY layer
(deflayer QWERTY
  ‚Üπ   q    w    e    r    t         u    i    o    p   [     ]
  ‚á™   a    s    d    f    g         j    k    l    ;    '    ‚èé
  _   z    x    c    v    b         n    m    ,    .    /    _
              ‚Äπ‚å• ‚Äπ‚óÜ          @ndef          ‚óÜ‚Ä∫ ‚å•‚Ä∫
)
